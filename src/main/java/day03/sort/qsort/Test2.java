package day03.sort.qsort;

public class Test2 {
    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        int[] array;
        array = new int[]{4881,16282,21068,22308,25366,4749,26870,26525,7001,23813,18916,20793,28600,6055,11465,27783,23973,6222,29086,2680,18087,21523,29277,2593,6426,11613,16298,8598,24696,25857,2735,14736,3329,8353,4772,88,18247,9747,23621,26564,29111,4194,10751,4241,17670,2041,15323,7405,24716,27973,26599,6645,13907,8019,17291,21078,21068,23578,14211,27720,12850,3990,9606,15342,4840,1446,7226,14393,2415,8036,24318,6066,16061,14312,7918,11110,15409,29576,16450,15470,20796,18628,8377,12834,7206,6100,8857,23782,17103,26513,26956,29738,6304,20898,7498,7445,10463,118,11966,11670,2571,9204,12476,28076,12317,8162,17704,4700,6627,17354,15571,27622,6266,19855,24194,27324,23206,28794,17285,9752,17365,25634,7812,9111,15378,7371,20213,22737,5340,1537,10350,17712,14254,1849,18276,16543,18113,29933,21445,26086,14677,26655,9504,16407,4948,21606,28821,16986,9283,3508,21826,28835,12531,3021,28190,22000,24891,5194,654,9882,3822,14576,14123,7603,25558,19302,19772,18539,23343,22933,1507,7829,18452,24858,160,11523,2808,11376,184,6292,4145,27623,4229,134,16065,887,10266,28138,5260,20873,20363,25464,3257,10195,15803,9650,5247,29301,2873,16427,24956,16192,18080,12422,18445,8275,27126,28651,12923,24594,25562,13728,20916,8723,24791,25719,21571,29149,19609,28996,22921,22960,28939,9761,3955,15949,27860,10690,12588,20801,1107,24986,11687,1252,19930,26954,8094,17083,487,6133,22103,23129,6063,11449,6174,6234,27594,15398,20243,25701,20296,7346,17227,11151,2230,27438,22098,26362,15764,307,28333,2431,26788,14958,18096,28540,10178,15764,16596,22618,5643,7884,15886,6779,10493,820,11607,21953,20917,8226,19254,20862,6623,19931,6326,6112,22224,19057,13443,26241,4951,18663,14604,2281,23145,2249,17865,18081,28809,12592,22829,16688,23098,1463,3940,22512,21834,13378,27636,6346,21663,23294,9181,26428,5568,21628,5235,6370,17158,16856,187,5542,23246,14828,22553,17657,6321,26761,644,12496,7314,3293,816,2723,13082,2816,16542,24657,16024,6690,22074,27723,28746,216,8808,25818,15326,19344,3889,24962,6774,29384,28311,8734,1401,16490,11809,6804,7597,26522,859,26278,7358,3062,18172,24355,22881,4852,22965,27346,2852,23310,29771,7457,1191,3764,12057,18251,19517,9061,13208,27381,4466,20104,2053,29875,8017,26276,25261,18087,25892,15604,11098,27095,3508,9564,9924,3047,21212,601,4402,27429,17951,7906,6510,991,23100,24206,26340,25007,2647,21747,10781,4621,14789,16725,5467,16015,20567,16718,4222,20778,6831,2209,1885,29604,17922,25749,19834,2857,20394,783,15682,3253,2963,15109,24851,9889,12858,1712,24225,17078,15623,12339,5884,10981,13342,20688,23323,26377,28617,478,10813,13322,24847,17666,3941,5082,23032,23370,19168,22346,5345,10820,10910,15751,554,11630,12857,12305,15014,25562,28310,1260,8317,15222,12258,3664,564,28437,23848,15915,25305,11639,13118,15329,4056,15018,26900,5350,24323,10263,18055,23980,4408,5632,4345,17708,24890,7220,16316,11401,17028,13812,6673,12446,8840,8675,25997,26719,26907,925,21741,13349,13998,29627,15937,21635,18842,16685,23378,21733,28413,8318,128,25854,7708,2928,26644,14178,16624,8459,20393,3587,7415,29715,6170,6248,12848,6902,9282,19370,6891,14917,1991,610,13182,13955,9816,15193,24675,15512,4023,7088,29718,15551,24824,19785,17144,21334,18934,14626,22568,28500,20898,2257,3264,22356,27629,18270,1768,25895,15258,16323,23512,18489,2769,12081,14906,1707,28956,12460,2725,10526,23907,12524,20030,29671,10548,21366,28459,6351,9332,19225,25808,23359,19676,24457,20451,6113,5003,26255,4436,19,27469,8001,3240,2081,14968,27814,11535,2365,11516,8817,27159,17776,1207,13684,19422,23725,23260,21721,2840,12509,25388,2374,10412,8297,25177,415,23518,28210,11706,5576,6541,29028,6600,27652,14053,7880,15284,4942,3595,17726,5862,12149,29395,26777,18889,5973,21970,12097,10739,24173,2841,28349,19922,21983,8140,28537,27641,14269,25826,16337,18039,22146,22366,8362,5949,23528,16260,17783,9775,847,845,2587,29420,28340,19005,1469,18205,22836,6512,25850,17806,15800,26799,15717,260,3187,8128,25018,4940,27167,18012,11509,28104,14501,21597,14858,26898,8493,25841,2618,21582,479,13763,11115,26043,4760,2640,17696,5510,23325,15348,22092,3144,5996,8744,6053,14004,16625,18862,6847,16097,23043,18343,25167,16602,6656,28122,12623,2432,5195,991,13105,10411,14218,19159,16481,25575,17103,17754,4599,22625,15955,20805,8002,5547,9831,29584,3006,23818,21466,12820,22115,22144,26311,12182,27160,1613,5888,24996,18510,4909,26485,7177,25033,9273,8198,6590,22536,27511,418,2710,24035,13073,21636,22431,220,21441,18409,22314,10983,12454,11553,9040,7348,8967,5865,8373,17899,25600,26199,19080,28839,9777,12916,3988,17901,3368,3223,18072,11180,21905,8536,14246,11725,3033,2508,13340,12937,6631,6597,20059,474,24690,21787,13634,19460,3915,12758,24687,19288,22442,9825,29703,16215,16437,13935,6019,23157,10196,2079,28662,15700,21727,16105,17907,21626,17474,6401,7375,17644,22838,15244,24799,15404,4081,3163,124,4057,15901,420,25224,20011,8256,3844,23016,5495,2557,26351,19635,5530,29789,5986,17222,4400,4513,7274,27953,19827,19973,85,24967,23548,3872,15319,15734,5486,18187,4086,26818,15013,2764,16773,7428,1900,23225,9877,3313,15945,24057,18538,2222,5286,13696,13759,22215,7147,26267,997,7455,29323,24535,2499,27082,22496,24312,2195,19791,17688,25886,21790,28458,13740,23738,1812,10618,20742,10622,26603,19390,2974,20892,13433,27986,27353,25217,5840,25629,22381,19177,22567,1140,19887,28604,1822,21229,14184,7054,12337,3478,21811,18099,15078,19392,7094,14295,29372,1266,7754,7444,12363,401,10510,21436,11989,22256,10707,14563,10869,15985,14057,2246,10419,21386,29943,18868,9995,28001,14853,4368,12848,13250,11101,1366,21263,8079,10233,12873,5031,3753,21189,5263,28792,11072,23159,23294,23602,8363,24751,4805,17364,6991,25665,1706,11892,18488,28369};
        //用自写快排
        quickSort(array,0,array.length-1);
        long end = System.currentTimeMillis();
        System.out.println("用时:"+(end-start)+"ms");
        for (int i = 0; i < array.length; i++) {
            System.out.println(array[i]);
        }
    }

    public static void quickSort(int[] arr,int low,int high){
        int i,j,temp,t;
        if(low>high){
            return;
        }
        i=low;
        j=high;
        temp = arr[low];
        while (i<j) {
            while (temp<=arr[j]&&i<j) {
                j--;
            }
            while (temp>=arr[i]&&i<j) {
                i++;
            }
            if (i<j) {
                t = arr[j];
                arr[j] = arr[i];
                arr[i] = t;
            }
        }
        arr[low] = arr[i];
        arr[i] = temp;
        quickSort(arr, low, j-1);
        quickSort(arr, j+1, high);
    }
}
